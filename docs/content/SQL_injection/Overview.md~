# SQL Injection

Structured Query Language Injection

---

## 数据库分析

通常Web应用程序使用的数据库保存一下信息：  
用户账户、证书和个人信息；  
所销售商品的介绍与价格；  
订单、账单和支付细节；  
每名应用程序用户的权限。  
数据库中的信息通过SQL访问。SQL可用于读取、更新、增加或删除数据库中保存的信息。如果建立语句的方法不安全，那么应用程序可能易于受到SQL注入攻击。

##基本漏洞

以书籍零售商使用的Web应用程序为例，该应用程序允许用户根据作者、书名、出版商等信息搜索产品。  
当一个用户搜索Wiley出版的所有书籍时，应用程序执行以下查询：  
SELECT author ,title, year FROM books WHERE publisher = ‘ Wiley’ and published = 1  
分析：在这个查询中，等号左边的词由SQL关键字，表和数据库列名称构成。这个部分的全部内容由程序员在创建应用程序时建立。当然表达式Wiley由用户提交，它是一个数据项。SQL查询中的字符串数据必须包含在单引号内，与查询的其他内容分隔开来。  
漏洞一：SELECT author ,title, year FROM books WHERE publisher = ‘O’Reilly’ and published = 1  
在这个实例中，查询解释器以和前面一个示例相同的方式到达字符串数据位置。它解析这个包含在单引号中的数据，得到O。然后遇到Reilly’，这并不是有效的SQL语法，因此应用程序报错。  
漏洞二：攻击者通过对查询进行修改，通过以下搜索项，返回零售商目录中的每一本书籍。  
Wiley ‘ OR 1=1--  
此时，应用程序将执行以下的查询：  
SELECT author, title, year FROM books WHERE publisher = ‘Wiley’ OR 1=1-- ‘ and published=1  
这个查询对开发者查询中的WHERE子句进行修改，增加另外一个条件。数据库将检查书籍表中的每一行，提取published列值为Wiley或其中1=1的每条记录。因为1=1永真，所以数据库将返回书籍表中的所有记录。  
如下图：

![register](img/register.png)  
用户注册，用户名为abcd，用户密码为abcd；  

![login1](img/login1.png)  
输入用户名，密码之后，点击“register”，界面跳转到上界面；  

![injection](img/injection.png)  
用“w’ or 1=1#”实现SQL注入，由于mysql中的注释符为“#”；  

![login2](img/login2.png)  
点击“login”之后获取之前用户注册跳转的界面。  

##不同语句类型的注入

1、SELCET语句  
作用：从数据库中获取信息。  
使用方法：查询WHERE子句，由于WHERE子句一般在SELECT语句的最后，攻击者可以使用注释符号将查询截短到其输入的结束位置，而不使整个语法失效。

2、INSERT语句  
作用：在表中建立一个新的数据行。  
使用方法：攻击者完全盲目地注入一个INSERT语句也能够从应用程序中提取出字符串数据。比如攻击者介意拦截数据库版本的字符串，并把它插入自己用户资料的一个字段中。

3、UPDATE语句  
作用：修改表中的一行或几行数据。  
使用方法：先核实用户的现有密码是否正确，如果密码无误，就用新的值更新它。若这项功能存在SQL注入漏洞，那么攻击者就能避开现有的密码检查，通过输入“admin’--”这样的用户更新管理员密码。

4、DELETE语句  
作用：删除表中的一行或几行数据。  
使用方法：通常使用WHERE子句告诉数据库更新表中哪些行的数据，并可能在这个子句中并入用户提交的数据。破坏正常运行的WHERE子句可能造成严重的后果。


##SQL注入漏洞类型

1、注入字符串数据  
若SQL查询合并用户提交的数据，它会将这些数据包含在单引号中。为利用任何SQL注入漏洞，则需摆脱这些引号的束缚。

2、注入数字数据  
如果SQL查询合并用户提交的数字数据，应用程序仍然会将它包含在单引号之中，作为字符串进行处理。 因此，一定要执行前面描述的针对字符串数据的渗透测试步骤。但是，许多时候，应用程序会将数字数据以数字格式直接传送到数据库中，并不把它放入单引号中。

##SQL注入的预防
1、单引号配对转义  
如果用户提交的数字数据内置在SQL查询中，这种数据通常并不包含在单引号中。因此，攻击者能够破坏数据使用环境并开始输入任意SQL查询，这时就不必输入单引号。在二阶SQL注入攻击中，最初在插入数据库中时已经安全转义的数据随后被从数据库中读取出来，然后再次写入。当重新使用数据时最初配对的引号又恢复到单引号形式。  
如果在使用Oracle的实例中所见，编写存在缺陷的存储过程可能在自身代码中包含的SQL注入漏洞，在存储过程中构建SQL语句时也可能出现类似的安全问题，使用存储过程也无法防止漏洞产生。

2、参数化查询（预处理语句）  
大多数数据库和应用开发平台都提供API，对不可信的输入进行安全处理，以防止SQL注入漏洞。  
（1）应用程序指定查询结构，为用户输入的每个数据预留占位符。  
（2）应用程序指定每个占位符的内容。  
不安全查询和相应的参数化查询的对比：  
String queryText = "select ename,sal from emp where ename = '"  
queryText += request.getParameter("name");  
queryText +="'";  
stmt = con.createStatement();  
rs = stmt.executeQuery(querytext);  
上述代码中，用户提交的name参数被直接嵌入到一个SQL语句中，致使应用程序易受SQL注入。  
String queryText = "SELECT ename,sal FROM EMP WHERE ename = ?"  
stmt = con.prepareStatement(queryText);  
stmt.setString(1,request.getParameter("name"));  
rs = stmt.executeQuery();  
上述代码使用一个问号作为用户提交参数的占位符，以确定查询的结构。随后，代码调用prepareStatement方法解释了这个参数，并确定将要执行的查询结构。之后，它使用setString方法指定参数的实际值。由于查询的结构已经固定，这个值可为任何数据类型，而不会影响查询的结构。

3、深层防御  
（1）当访问数据库时，应用程序应尽可能使用最低权限的账户。  
（2）许多企业数据库包含大量默认功能，可被能够执行任意SQL语句的攻击者利用。  
（3）应评估、测试并及时安装供应商发布的所有安全补丁，以修复数据库软件本身已知的漏洞。  
