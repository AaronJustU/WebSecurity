# SQL Injection

Structured Query Language Injection

---

##SQL注入的预防
1、单引号配对转义  
如果用户提交的数字数据内置在SQL查询中，这种数据通常并不包含在单引号中。因此，攻击者能够破坏数据使用环境并开始输入任意SQL查询，这时就不必输入单引号。在二阶SQL注入攻击中，最初在插入数据库中时已经安全转义的数据随后被从数据库中读取出来，然后再次写入。当重新使用数据时最初配对的引号又恢复到单引号形式。  
如果在使用Oracle的实例中所见，编写存在缺陷的存储过程可能在自身代码中包含的SQL注入漏洞，在存储过程中构建SQL语句时也可能出现类似的安全问题，使用存储过程也无法防止漏洞产生。

2、参数化查询（预处理语句）  
大多数数据库和应用开发平台都提供API，对不可信的输入进行安全处理，以防止SQL注入漏洞。  
（1）应用程序指定查询结构，为用户输入的每个数据预留占位符。  
（2）应用程序指定每个占位符的内容。  
不安全查询和相应的参数化查询的对比：  

		String queryText = "select ename,sal from emp where ename = '"  
		queryText += request.getParameter("name");  
		queryText +="'";  
		stmt = con.createStatement();  
		rs = stmt.executeQuery(querytext);  

上述代码中，用户提交的name参数被直接嵌入到一个SQL语句中，致使应用程序易受SQL注入。  

		String queryText = "SELECT ename,sal FROM EMP WHERE ename = ?"  
		stmt = con.prepareStatement(queryText);  
		stmt.setString(1,request.getParameter("name"));  
		rs = stmt.executeQuery();  

上述代码使用一个问号作为用户提交参数的占位符，以确定查询的结构。随后，代码调用prepareStatement方法解释了这个参数，并确定将要执行的查询结构。之后，它使用setString方法指定参数的实际值。由于查询的结构已经固定，这个值可为任何数据类型，而不会影响查询的结构。

3、深层防御  
（1）当访问数据库时，应用程序应尽可能使用最低权限的账户。  
（2）许多企业数据库包含大量默认功能，可被能够执行任意SQL语句的攻击者利用。  
（3）应评估、测试并及时安装供应商发布的所有安全补丁，以修复数据库软件本身已知的漏洞。  
